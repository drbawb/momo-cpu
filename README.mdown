P150 Emulator Website
===

This is the fully-functional P150 emulator exposed through a HTTP/REST frontend.
This site, and the P150 emulator itself, are written in the [Rust](http://rust-lang.org) programming
language.

Source code for the emulator is availble on [BitBucket](https://bitbucket.org/drbawb/momo-cpu).
You should be able to compile and run the emulator on Mac, Linux, BSD, and possibly Windows.

---

GET /
	Fetches the welcome page.
	This will load the javascript client on the users machine.

POST /cpu/new
	RETURNS: JSON:Number
	Creates a new virtual CPU and returns the CPU identifier to the client.
	This CPU ID can be used to execute further instructions.

POST /cpu/{id}/load
	PARAMS: JSON:Array (max-len 128, a series of 2-byte instructions to be loaded into machine memory)
	RETURNS: JSON:Object (CpuState)
	Loads the requested CPU id with the supplied memory instructions.
	(Note that calling this function implicitly resets the IP to address 0x00)

POST /cpu/{id}/run
	RETURNS: { cpu: JSON:Object (CpuState), instr: JSON:Array (Instructions) }
	The requested CPU id will run its loaded program to completion.
	The CPU is limited to a maximum number of 10,000 ticks. 
	Regardless; once the CPU has halted its last known state will be returned.

	An additional `instr` array contains a trace of all IP/IR changes the CPU performed.
	This can be useful for debugging purposes.

---

POST /cpu/{id}/tick
	???
	Performs _exactly_ one complete fetch/decode/execute cycle and returns the machine state. 
	WARNING: This function will cycle _even if the last instruction halted the CPU._
			 Also note that the IP will eventually overflow to 0x00.

POST /cpu/{id}/save
	???
	The requested CPU virtual machine state will be persisted and given a permanent URL.
	You can use this to share your P150 programs with other users.


